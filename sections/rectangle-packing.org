* A Rectangle Packing Formulation for BEB Charging
:PROPERTIES:
:custom_id: sec:problemformulation
:END:

Applying the PAP to BEB charging requires four fundamental changes. The first is that the time that a BEB spends
charging must be allowed to vary. That is, $u_i$, $d_i$, and $s_i$ become variables of optimization. This is done
primarily because chargers of various speeds are to be introduced. Allowing BEBs to have multiple visits that a charger
decided upon during the optimization requires that the start and stop times must be changeable to respect the SOC
constraints. Second, in the PAP each visit is assumed to be a different vehicle. For the BEB charging problem, each bus
may make multiple visits to the station throughout the day. Thus, the resulting SOC for a bus at a given visit is
dependent upon each of the prior visits. The third fundamental change is related to the first two. The SOC of each bus
must be tracked to ensure that charging across multiple visits is sufficient to allow each bus to execute its route
throughout the day. Finally, as previously stated, the PAP models the charger as one continuous bar. For the BEB, it
will be assumed that a discrete number of chargers exist. Moreover, it is assumed that these chargers may have different
charge rates.

#+begin_src latex
  A few assumptions are made in the derivation of the algorithm. As this work is not focused on estimating the discharge
  of a BEB during its route, the discharge for each route will be pre-calculated by assuming a fixed discharge rate kW
  multiplied by the route duration in hours. Secondly, it is assumed that the initial SOC of each BEB at the beginning of
  the day, $\alpha_b\kappa_b$, is larger than the minimum required SOC at the end of the day, $\beta_b\kappa_b$.
  Therefore, it must be assumed that the difference in the SOC can reach $\alpha_b\kappa_b$ by the beginning of the next
  working day.
#+end_src

The discussion of the four changes is separated into two sections. \autoref{sec:queuing} discusses the changes in the
spatial-temporal constraint formulation to form a queuing constraint. \autoref{sec:batt_dynamics} then discusses the
addition of bus charge management. This section ends with a brief discussion of a modified objective function and the
statement of the full problem in \autoref{sec:BEB_MILP}. The notation is explained throughout and summarized in
\autoref{tab:milp-variables}.

** Queuing Constraints
:PROPERTIES:
:custom_id: sec:queuing
:END:

\noindent The queuing constraints ensure that the buses entering the charging queues are assigned
feasibly. There are three sets to differentiate between different entities. $\mathbb{B} = \{1, ..., n_B\}$ is the set of
bus indices with index $b$ used to denote an individual bus, $\mathbb{Q} = \{1, ..., n_Q\}$ is the set of queues with index $q$
used to denote an individual queue, and $\mathbb{V} = \{1, ..., n_V\}$ is a set of visits to the station with $i$ and
$j$ used to refer to individual visits. The mapping $\Gamma: \mathbb{V} \rightarrow \mathbb{B}$ is used to map a visit
index, $i$, to a bus index, $b$. The notation $\Gamma_i$ is used as a shorthand to refer to the bus index $b$ for visit
$i$.

The actual physical dimensions of the BEB are ignored, and it is assumed that each BEB will be assigned to charge at a
particular charger. Because of this assumption, the PAP spatial variable, $l_i$, may be removed and $v_i$ is made to be
an integer corresponding to which queue visit $i$ will be using, $v_i \in \mathbb{Q}$. That is, the queue position is now
discretized over $n_Q$ queues where a BEB occupies single charge queue. Thus, when $\psi_{ij} = 1$, vehicle $j$ is placed
in a charging queue with a larger index than vehicle $i$, $v_j > v_i$. The charger length $L$ is likewise replaced with
$n_Q$. Note that $n_Q = n_B + n_C$, where $n_B$ is the number of buses and $n_C$ is the number of chargers. The
rationale for adding additional idle queues is to allow BEBs to be "set aside" if no additional charge is required.
Adding one idle queue for each BEB ensures that the constraints will be satisfied if multiple buses sharing overlapping
times at the station are placed in idle queues. This method will be applied when defining the parameters in
\autoref{sec:example}. The modified queuing constraints can be written as shown in \autoref{eq:packconstrs}.

#+begin_src latex
  \begin{subequations}
  \label{eq:packconstrs}
  \begin{align}
      v_i - v_j - (\psi_{ij} - 1)n_Q \geq 1 \label{subeq:space} \\ d_i \leq \tau_i \label{subeq:valid_depart} \\ s_i \geq
      0 \label{subeq:pos_charge} \\ v_i \in \mathbb{Q} \label{subeq:vspace}
  \end{align}
  \end{subequations}
#+end_src

The constraint in \autoref{subeq:space} is nearly identical to \autoref{subeq:bapspace}, but rather than viewing the
charger as a continuous strip of length $L$, it is discretized into $n_Q$ queues each with a width of unit length one. A
BEB is also assigned a unit length of one which is reflected in \autoref{subeq:space} by $\cdot \geq 1$.
\autoref{subeq:valid_depart} ensures that the time the BEB is detached from the charger, $d_i$, is before its departure
time, $\tau_i$ seconds. Note the introduction of the new variable $\tau_i$ exists to allow the final charge time to be
independent a similar manner that the inital charge time need not coincide with the arrival time, $a_i \le u_i \le d_i \le
\tau_i$. \autoref{subeq:vspace} defines the of integers that $v_i$ that represent the $n_Q$ chargers.

** Battery Charge Dynamic Constraints
:PROPERTIES:
:custom_id: sec:batt_dynamics
:END:

Battery dynamic constraints are now to be introduced. Two constraints are enforced on the SOC for each BEB: the SOC must
always remain above a specified percentage to guarantee sufficient charge to execute their respective routes and each
bus must end the day with an SOC above a specified threshold, preparatory for the next day.

The SOC upon arrival for visit $i$ is denoted as $\eta_i$ kWh. Because the SOC for a visit $i$ is dependent on its previous
visits, the mapping $\Upsilon: \mathbb{V} \rightarrow \mathbb{V} \bigcup \{\varnothing\}$ is used to determine the next visit that corresponds
to the same bus, with $\Upsilon_i$ being shorthand notation. Thus, $\Gamma_j$ and $\Gamma_{\Upsilon_i}$, for $\Upsilon_i = j$, would both map to the
same bus index as long as $\Upsilon_i$ is not the null element, $\varnothing$. The null element is reserved for BEBs that have
no future visits.

#+begin_src latex
  To drive time spent on the charger, $s_i$, as well as define initial, final, and intermediate bus charges for each visit
  $i$, the sets for initial and final visits must be defined. Let the mapping of the first visit by each bus be denoted as
  $\Gamma^0 : \mathbb{B} \rightarrow \mathbb{V}$. The resulting value of the mapping $\Gamma^0$ represents the index for
  the first visit of bus $b$. Similarly, let $\Gamma^f : \mathbb{B} \rightarrow \mathbb{V}$ maps the indices for the final
  visits for each bus $b \in \mathbb{B}$. Let the storthand for each mapping be denoted as $\Gamma^0_b$ and $\Gamma^f_b$,
  respectively. The initial and final bus charge percentages, $\alpha$ and $\beta$, can then be represented by the
  constraint equations $\eta_{\Gamma^0_b} = \alpha_b \kappa_{b}$ and $\eta_{\Gamma^f_b} = \beta_b \kappa_{b}$,
  respectively. The intermediate charges must be determined during runtime.
#+end_src

It is assumed that the charge received is proportional to the time spent charging. The rate for charger $q$ is denoted
as $r_q$ kW. Note that a value of $r_q = 0$ corresponds to a queue where no charging occurs. A bus in such a queue is
simply waiting at the station for the departure time. The queue indices are ordered such that the first $n_B$ queues
have $r_q = 0$ to allow an arbitrary number of buses to sit idle at any given moment in time. The next $n_C$ queues are
reserved for the slow and fast chargers. The amount of discharge between visits $i$ and $\Upsilon_i$, the next visit of the
same bus, is denoted as $\Delta_i$ kWh. If visit $i$ occurred at charger $q$, the SOC of the BEB's next arrival, $\Upsilon_i$, would
be $\eta_{\Upsilon_i} = \eta_i + s_i r_q - \Delta_i$.

The binary decision variable $w_{iq} \in \{0,1\}$ is introduced to indicate the active charger for visit $i$ in vector
form. The form of the SOC for the next visit, $\Upsilon_i$, can be written using the following constraints.

#+begin_src latex
\begin{subequations}
    \label{subeq:pre_next_charge}
\begin{align}
    \eta_{\Upsilon_i} = \eta_i + \sum_{q=1}^{n_Q} s_i w_{iq} r_q - \Delta_i \\
    \sum_{q=1}^{n_Q} w_{iq} = 1                           \\
    w_{iq} \in \{0,1\}.
\end{align}
\end{subequations}
#+end_src

The choice of queue for visit $i$, becomes a slack variable and is defined in terms of $w_{iq}$ as

#+begin_src latex
\begin{equation}
    v_i = \sum_{q=1}^{n_Q} qw_{iq}.
\end{equation}
#+end_src

Maximum and minimum values for the charges are included to ensure that the battery is not overcharged and to guarantee
sufficient charge for subsequent visits. The upper and lower battery charge bounds for bus $b$ are $\kappa_b$ and $\nu_b \kappa_b$,
respectively , where $\kappa_b$ is the battery capacity and $\nu_b$ is a percent value. The upper and lower bounds for the
current SOC are written as follows.

#+begin_src latex
  \begin{subequations}
      \label{subeq:pre_min_max}
  \begin{align}
      \eta_i + \sum_{q=1}^{n_Q} s_i w_{iq} r_q \leq \kappa_{\Gamma_i} \label{eq:maxcharge}\\
      \eta_i \geq \nu_{\Gamma_i} \kappa_{\Gamma_i} \label{eq:mincharge}
  \end{align}
  \end{subequations}
#+end_src

\autoref{eq:maxcharge} ensures that the BEB SOC does not exceed the battery capacity, and \autoref{eq:mincharge}
enforces that the inital SOC for each visit is above the threshold of $\nu_{\Gamma_i}\kappa_{\Gamma_i}$. Note that the term $s_i w_{iq}$
is a bilinear term. A standard way of linearizing a bilinear term that contains an integer variable is by introducing a
slack variable with an either/or constraint [cite:@chen-2010-applied;@rodriguez-2013-compar-asses]. Allowing the slack
variable $g_{iq}$ seconds to be equal to $s_i w_{iq}$, $g_{iq}$ can be defined as

#+begin_src latex
\begin{equation}
    \label{eq:giq_cases}
    g_{iq} =
    \begin{cases}
        s_i & w_{iq} = 1 \\
        0 & w_{iq} = 0
    \end{cases}.
\end{equation}
#+end_src

\autoref{eq:giq_cases} can be expressed as a mixed integer constraint using big-M notation with the following four
constraints.

#+begin_src latex
\begin{subequations}
    \label{eq:slack_gain}
\begin{align}
    s_i - (1 - w_{iq})M \leq g_{iq}  \label{subeq:repgpgret} \\
    s_i \geq g_{iq}                 \label{subeq:repgples} \\
    Mw_{iq} \geq g_{iq}              \label{subeq:repgwgret} \\
    0 \leq g_{iq}                   \label{subeq:repgwles}
\end{align}
\end{subequations}
#+end_src

\noindent where $M$ is a large src_latex{unitless} value. If $w_{iq} = 1$ then \autoref{subeq:repgpgret} and
\autoref{subeq:repgples} become $s_i \leq g_{iq}$ and $s_i \geq g_{iq}$, forcing $s_i = g_{iq}$ with \autoref{subeq:repgwgret}
being inactive. If $w_{iq} = 0$, \autoref{subeq:repgpgret} is inactive and \autoref{subeq:repgwgret} and
\autoref{subeq:repgwles} force $g_{iq} = 0$.

** The BEB Charging Problem
:PROPERTIES:
:custom_id: sec:BEB_MILP
:END:
The goal of the MILP is to utilize chargers as little as possible to reduce energy costs with fast charging being
penalized more to avoid the adverse effects of fast charging on battery health as well as the
larger usage cost. Thus, an assignment cost $m_q$ and usage cost $\epsilon_q$ are associated with each charger, $q$.
These unitless weights can be adjusted based on charger type or time of day that the visit
occurs. The assignment term takes the form $w_{iq}m_q$, and the usage term takes the form $g_{iq} \epsilon_q$. The
resulting BEB charging problem is defined in \autoref{eq:objective}.

#+begin_src latex
\begin{equation}
\label{eq:objective}
	\min \sum_{i=1}^N \sum_{q=1}^{n_Q} \Big( w_{iq} m_q + g_{iq} \epsilon_q \Big) \\
\end{equation}
#+end_src

Subject to the constraints

#+begin_src latex
\begin{multicols}{2}
\begin{subequations}
                                                     \label{eq:dynconstrs}
\begin{equation}
    u_j - u_i - s_i - (\sigma_{ij} - 1)T \geq 0              \label{subeq:m_time}         \\
\end{equation}
\begin{equation}
    v_j - v_i - (\psi_{ij} - 1)n_Q \geq 1                  \label{subeq:m_space}        \\
\end{equation}
\begin{equation}
    \sigma_{ij} + \sigma_{ji} + \psi_{ij} + \psi_{ji} \geq 1            \label{subeq:m_valid_pos}    \\
\end{equation}
\begin{equation}
    \sigma_{ij} + \sigma_{ji} \leq 1                              \label{subeq:m_sigma}        \\
\end{equation}
\begin{equation}
    \psi_{ij} + \psi_{ji} \leq 1                              \label{subeq:m_delta}        \\
\end{equation}
\begin{equation}
    s_i + u_i = d_i                                  \label{subeq:m_detach}       \\
\end{equation}
\begin{equation}
    \eta_{\Gamma^0_b} = \alpha_{\Gamma_i} \kappa_{\Gamma_i}                         \label{subeq:init_charge}    \\
\end{equation}
\begin{equation}
    a_i \leq u_i \leq (T - s_i)                            \label{subeq:m_valid_starts} \\
\end{equation}
\begin{equation}
    d_i \leq \tau_i                                        \label{subeq:m_valid_depart} \\
\end{equation}
\begin{equation}
    \eta_i + \sum_{q=1}^{n_Q} g_{iq} r_q - \Delta_i = \eta_{\gamma_i}   \label{subeq:next_charge}    \\
\end{equation}
\begin{equation}
    \eta_i + \sum_{q=1}^{n_Q} g_{iq} r_q - \Delta_i \geq \nu_{\Gamma_i} \kappa_{\Gamma_i} \label{subeq:min_charge}     \\
\end{equation}
\begin{equation}
    \eta_i + \sum_{q=1}^{n_Q} g_{iq} r_q \leq \kappa_{\Gamma_i}         \label{subeq:max_charge}     \\
\end{equation}
\begin{equation}
    \eta_{\Gamma^f_b} \geq \beta_{\Gamma_f} \kappa_{\Gamma_f}                   \label{subeq:final_charge}   \\
\end{equation}
\begin{equation}
    s_i - (1 - w_{iq})M \leq g_{iq}                     \label{subeq:gpgret}         \\
\end{equation}
\begin{equation}
    s_i \geq g_{iq}                                     \label{subeq:gples}          \\
\end{equation}
\begin{equation}
    Mw_{iq} \geq g_{iq}                                 \label{subeq:gwgret}         \\
\end{equation}
\begin{equation}
    0 \leq g_{iq}                                       \label{subeq:gwles}          \\
\end{equation}
\begin{equation}
    v_i = \sum_{q=1}^{n_Q} qw_{iq}                      \label{subeq:wmax}           \\
\end{equation}
\begin{equation}
    \sum_{q=1}^{n_Q} w_{iq} = 1                         \label{subeq:wone}           \\
\end{equation}
\begin{equation}
   w_{iq}, \sigma_{ij}, \psi_{ij} \in \{0,1\}\;            \label{subeq:binaryspace}        \\
\end{equation}
\begin{equation}
    v_i, q_i \in  \mathbb{Q}                                         \label{subeq:Qspace}        \\
\end{equation}
\begin{equation}
    i \in \mathbb{V}                                   \label{subeq:Ispace}         \\
\end{equation}
\end{subequations}
\end{multicols}
#+end_src

\autoref{subeq:m_time}-\autoref{subeq:m_valid_depart} are reiterations of the queuing constraints in
\autoref{eq:packconstrs}. \autoref{subeq:init_charge}-\autoref{subeq:final_charge} provide the battery charge
constraints. \autoref{subeq:gpgret}-\autoref{subeq:gwles} define the charge gain of every visit/queue pairing. The last
constraints \autoref{subeq:binaryspace}-\autoref{subeq:Ispace} define the sets of valid values for each variable.
